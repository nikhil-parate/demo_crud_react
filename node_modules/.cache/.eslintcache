[{"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\index.js":"1","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\App.js":"2","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\form.js":"3","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\About.js":"4","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\Home.js":"5","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\posts.js":"6","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\history.js":"7","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\context.js":"8","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\Counter.js":"9"},{"size":166,"mtime":1627304173938,"results":"10","hashOfConfig":"11"},{"size":1168,"mtime":1627554888571,"results":"12","hashOfConfig":"11"},{"size":7423,"mtime":1627554364488,"results":"13","hashOfConfig":"11"},{"size":291,"mtime":1627373946209,"results":"14","hashOfConfig":"11"},{"size":74,"mtime":1627373788264,"results":"15","hashOfConfig":"11"},{"size":99,"mtime":1627295377740,"results":"16","hashOfConfig":"11"},{"size":302,"mtime":1627374128638,"results":"17","hashOfConfig":"11"},{"size":124,"mtime":1627548156981,"results":"18","hashOfConfig":"11"},{"size":448,"mtime":1627554854993,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1agyg8x",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\index.js",[],["40","41"],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\App.js",[],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\form.js",["42","43","44"],"import React, {\r\n    Component\r\n} from 'react';\r\nimport {\r\n    Button,\r\n    Table\r\n} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'https://jsonplaceholder.typicode.com/posts';\r\nclass demo extends Component {\r\n    constructor() {\r\n        super();\r\n        this.myRef1 = React.createRef();\r\n        this.myRef2 = React.createRef();\r\n        this.myRef3 = React.createRef();\r\n        this.state = {\r\n            posts: [],\r\n            userId: \"\",\r\n            title: \"\",\r\n            body: \"\",\r\n        }\r\n    }\r\n    componentDidMount = () => this.getPost();\r\n    getPost = async () => {\r\n        try {\r\n            const {\r\n                data\r\n            } = await axios.get(API_URL);\r\n            //console.log(data);\r\n            this.setState({\r\n                posts: data\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    handle = async (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n        //console.log(this.state)\r\n\r\n    }\r\n    submit = async (event) => {\r\n        console.log(event.target);\r\n        event.preventDefault();\r\n        var flag = 0,\r\n            ID,\r\n            index;\r\n        for (var i = 0; i < this.state.posts.length; ++i) {\r\n            if (this.state.posts[i].id == this.myRef1.current.value) {\r\n                flag = 1;\r\n                ID = this.state.posts[i].id;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (flag === 0) {\r\n            const post = {\r\n                userId: this.myRef1.current.value,\r\n                title: this.myRef2.current.value,\r\n                body: this.myRef3.current.value,\r\n            }\r\n\r\n            console.log(\"if\")\r\n            try {\r\n                await axios.post(`${API_URL}`, post);\r\n                let posts = [...this.state.posts, post];\r\n                console.log(\"try\");\r\n                this.setState({\r\n                    posts\r\n                });\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        } else {\r\n            console.log(\"else\")\r\n            const post = {\r\n                userId: this.myRef1.current.value,\r\n                title: this.myRef2.current.value,\r\n                body: this.myRef3.current.value,\r\n            }\r\n\r\n            console.log(\"inside update\")\r\n            try {\r\n                await axios.put(`${API_URL}/${ID}`, post);\r\n                //console.log(posts);\r\n                this.state.posts[index].userId = post.userId;\r\n                this.state.posts[index].title = post.title;\r\n                this.state.posts[index].body = post.body;\r\n                const posts = [...this.state.posts];\r\n                this.setState({\r\n                    posts\r\n                });\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n    comments = async (Id) => {\r\n        const {\r\n            data\r\n        } = await axios.get(`${API_URL}/${Id}/comments`)\r\n        let res = [];\r\n        for (var i = 0; i < data.length; ++i) {\r\n            res.push(data[i].postId, data[i].id, data[i].name, data[i].email, data[i].body);\r\n        }\r\n        alert(res);\r\n\r\n    }\r\n    view = async (Id) => {\r\n        const {\r\n            data\r\n        } = await axios.get(`${API_URL}/${Id}`);\r\n        console.log(data);\r\n        alert(\"userId:  \" + data.id + \"   \" + \"Title:  \" + data.title + \"   \" + \"Body:  \" + data.body);\r\n    }\r\n    delete = async (postId) => {\r\n        try {\r\n            await axios.delete(`${API_URL}/${postId}`);\r\n            let posts = [...this.state.posts];\r\n            posts = posts.filter(({\r\n                id\r\n            }) => id !== postId);\r\n            this.setState({\r\n                posts\r\n            });\r\n            // console.log(posts);\r\n            // console.log(postId)\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    update = async (id, title, body) => {\r\n        this.myRef1.current.value = id;\r\n        this.myRef2.current.value = title;\r\n        this.myRef3.current.value = body;\r\n    }\r\n    render() {\r\n        return ( <\r\n            >\r\n            <\r\n            form onSubmit = {\r\n                this.submit\r\n            } >\r\n            <\r\n            label > userId <\r\n            input ref = {\r\n                this.myRef1\r\n            }\r\n            type = \"number\"\r\n            value = {\r\n                this.state.userId.value\r\n            }\r\n            name = \"userId\"\r\n            onChange = {\r\n                this.handle\r\n            }\r\n            /> < /\r\n            label > <\r\n            label > Title <\r\n            input ref = {\r\n                this.myRef2\r\n            }\r\n            type = \"text\"\r\n            value = {\r\n                this.state.title.value\r\n            }\r\n            name = \"title\"\r\n            onChange = {\r\n                this.handle\r\n            }\r\n            /> < /\r\n            label > <\r\n            label > Body <\r\n            input ref = {\r\n                this.myRef3\r\n            }\r\n            type = \"text\"\r\n            value = {\r\n                this.state.body.value\r\n            }\r\n            name = \"body\"\r\n            onChange = {\r\n                this.handle\r\n            }\r\n            /> < /\r\n            label > <\r\n            input type = \"submit\"\r\n            value = \"Submit\" / >\r\n            <\r\n            /form> <\r\n            Table >\r\n            <\r\n            thead >\r\n            <\r\n            th > userId < /th> <\r\n            th > Id < /th> <\r\n            th > Title < /th> <\r\n            th > Body < /th> <\r\n            th > Action < /th> < /\r\n            thead > <\r\n            tbody > {\r\n                this.state.posts.map(({\r\n                    userId,\r\n                    id,\r\n                    title,\r\n                    body\r\n                }) => {\r\n                    return ( <\r\n                        tr key = {\r\n                            id\r\n                        } >\r\n                        <\r\n                        td > {\r\n                            userId\r\n                        } < /td> <\r\n                        td > {\r\n                            id\r\n                        } < /td> <\r\n                        td > {\r\n                            title\r\n                        } < /td> <\r\n                        td > {\r\n                            body\r\n                        } < /td> <\r\n                        td > < Button onClick = {\r\n                            () => this.delete(id)\r\n                        } > Delete < /Button></td >\r\n                        <\r\n                        td > < Button onClick = {\r\n                            () => this.view(id)\r\n                        } > View User < /Button></td >\r\n                        <\r\n                        td > < Button onClick = {\r\n                            () => this.comments(id)\r\n                        } > View Comments < /Button></td >\r\n                        <\r\n                        td > < Button onClick = {\r\n                            () => this.update(id, title, body)\r\n                        } > Update < /Button></td >\r\n                        <\r\n                        /tr>\r\n                    );\r\n                })\r\n            } <\r\n            /tbody> < /\r\n            Table > <\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default demo;","C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\About.js",[],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\Home.js",[],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\posts.js",[],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\history.js",[],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\context.js",[],"C:\\Users\\nikhil.parate\\Desktop\\guvi\\react\\demosite\\src\\Counter.js",["45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":52,"column":40,"nodeType":"52","messageId":"53","endLine":52,"endColumn":42},{"ruleId":"54","severity":1,"message":"55","line":119,"column":45,"nodeType":"52","messageId":"56","endLine":119,"endColumn":46},{"ruleId":"54","severity":1,"message":"55","line":119,"column":79,"nodeType":"52","messageId":"56","endLine":119,"endColumn":80},{"ruleId":"57","severity":1,"message":"58","line":4,"column":5,"nodeType":"59","messageId":"60","endLine":6,"endColumn":6},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]